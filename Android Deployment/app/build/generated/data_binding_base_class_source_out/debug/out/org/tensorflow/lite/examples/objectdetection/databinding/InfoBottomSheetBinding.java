// Generated by view binder compiler. Do not edit!
package org.tensorflow.lite.examples.objectdetection.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.SeekBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.tensorflow.lite.examples.objectdetection.R;

public final class InfoBottomSheetBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final NestedScrollView bottomSheetLayout;

  @NonNull
  public final TextView inferenceTimeLabel;

  @NonNull
  public final TextView inferenceTimeVal;

  @NonNull
  public final TextView labelConfidenceThreshold;

  @NonNull
  public final TextView labelMaxResults;

  @NonNull
  public final TextView labelThreads;

  @NonNull
  public final SeekBar maxResultsSlider;

  @NonNull
  public final TextView maxResultsValue;

  @NonNull
  public final AppCompatSpinner spinnerDelegate;

  @NonNull
  public final AppCompatSpinner spinnerModel;

  @NonNull
  public final SeekBar threadsSlider;

  @NonNull
  public final TextView threadsValue;

  @NonNull
  public final SeekBar thresholdSlider;

  @NonNull
  public final TextView thresholdValue;

  private InfoBottomSheetBinding(@NonNull NestedScrollView rootView,
      @NonNull NestedScrollView bottomSheetLayout, @NonNull TextView inferenceTimeLabel,
      @NonNull TextView inferenceTimeVal, @NonNull TextView labelConfidenceThreshold,
      @NonNull TextView labelMaxResults, @NonNull TextView labelThreads,
      @NonNull SeekBar maxResultsSlider, @NonNull TextView maxResultsValue,
      @NonNull AppCompatSpinner spinnerDelegate, @NonNull AppCompatSpinner spinnerModel,
      @NonNull SeekBar threadsSlider, @NonNull TextView threadsValue,
      @NonNull SeekBar thresholdSlider, @NonNull TextView thresholdValue) {
    this.rootView = rootView;
    this.bottomSheetLayout = bottomSheetLayout;
    this.inferenceTimeLabel = inferenceTimeLabel;
    this.inferenceTimeVal = inferenceTimeVal;
    this.labelConfidenceThreshold = labelConfidenceThreshold;
    this.labelMaxResults = labelMaxResults;
    this.labelThreads = labelThreads;
    this.maxResultsSlider = maxResultsSlider;
    this.maxResultsValue = maxResultsValue;
    this.spinnerDelegate = spinnerDelegate;
    this.spinnerModel = spinnerModel;
    this.threadsSlider = threadsSlider;
    this.threadsValue = threadsValue;
    this.thresholdSlider = thresholdSlider;
    this.thresholdValue = thresholdValue;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static InfoBottomSheetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static InfoBottomSheetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.info_bottom_sheet, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static InfoBottomSheetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      NestedScrollView bottomSheetLayout = (NestedScrollView) rootView;

      id = R.id.inference_time_label;
      TextView inferenceTimeLabel = ViewBindings.findChildViewById(rootView, id);
      if (inferenceTimeLabel == null) {
        break missingId;
      }

      id = R.id.inference_time_val;
      TextView inferenceTimeVal = ViewBindings.findChildViewById(rootView, id);
      if (inferenceTimeVal == null) {
        break missingId;
      }

      id = R.id.label_confidence_threshold;
      TextView labelConfidenceThreshold = ViewBindings.findChildViewById(rootView, id);
      if (labelConfidenceThreshold == null) {
        break missingId;
      }

      id = R.id.label_max_results;
      TextView labelMaxResults = ViewBindings.findChildViewById(rootView, id);
      if (labelMaxResults == null) {
        break missingId;
      }

      id = R.id.label_threads;
      TextView labelThreads = ViewBindings.findChildViewById(rootView, id);
      if (labelThreads == null) {
        break missingId;
      }

      id = R.id.max_results_slider;
      SeekBar maxResultsSlider = ViewBindings.findChildViewById(rootView, id);
      if (maxResultsSlider == null) {
        break missingId;
      }

      id = R.id.max_results_value;
      TextView maxResultsValue = ViewBindings.findChildViewById(rootView, id);
      if (maxResultsValue == null) {
        break missingId;
      }

      id = R.id.spinner_delegate;
      AppCompatSpinner spinnerDelegate = ViewBindings.findChildViewById(rootView, id);
      if (spinnerDelegate == null) {
        break missingId;
      }

      id = R.id.spinner_model;
      AppCompatSpinner spinnerModel = ViewBindings.findChildViewById(rootView, id);
      if (spinnerModel == null) {
        break missingId;
      }

      id = R.id.threads_slider;
      SeekBar threadsSlider = ViewBindings.findChildViewById(rootView, id);
      if (threadsSlider == null) {
        break missingId;
      }

      id = R.id.threads_value;
      TextView threadsValue = ViewBindings.findChildViewById(rootView, id);
      if (threadsValue == null) {
        break missingId;
      }

      id = R.id.threshold_slider;
      SeekBar thresholdSlider = ViewBindings.findChildViewById(rootView, id);
      if (thresholdSlider == null) {
        break missingId;
      }

      id = R.id.threshold_value;
      TextView thresholdValue = ViewBindings.findChildViewById(rootView, id);
      if (thresholdValue == null) {
        break missingId;
      }

      return new InfoBottomSheetBinding((NestedScrollView) rootView, bottomSheetLayout,
          inferenceTimeLabel, inferenceTimeVal, labelConfidenceThreshold, labelMaxResults,
          labelThreads, maxResultsSlider, maxResultsValue, spinnerDelegate, spinnerModel,
          threadsSlider, threadsValue, thresholdSlider, thresholdValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
